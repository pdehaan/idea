// utility generator

@mixin mix-utilities($tokens...) {
  @if length($tokens) >= 1 {
    @each $var in $tokens {
      @include utilities($var);
    }
  }
}

@mixin utilities($token, $map: $mix-tokens) {
  $utility: get($token, $map);
  @if length($list: $utility) >= 0 {
    @debug "we got the utility map";
    @each $key, $value in $utility {
      @if type-of($value) == "map" {
        @include map-values($token, $key, $value);
        // @debug "values: #{$value}";
      } @else {
        &#{$mix-prefix}#{$key} {
          #{$key}: $value;
          // @debug "key: #{$key}";
        }
      }
    }
  } @else {
    @debug "utility map not found";
  }
}

@mixin map-values($token, $modifier-key, $values) {
  @if type-of($values) == "map" {
    @each $key, $val in $values {
      @if type-of($val) == "map" {
        &#{$mix-prefix}#{$key} {
          @include map-values($token, $modifier-key, $val);
        }
      } @else {
        // TODO refactor to handle color maps--remove `color` from output
        @if $key == "base" {
          &#{$mix-prefix}#{$token} {
            #{$token}#{$mix-prefix}#{$modifier-key}: $val;
          }
        } @else {
          &#{$mix-prefix}#{$key} {
            #{$token}#{$mix-prefix}#{$modifier-key}: $val;
          }
        }

        @if type-of($val) == "color" {
          @include map-colors($val, $key);
        }
      }
    }
  }
}

@mixin map-colors($val, $item) {
  @each $attribute in $mix-color-attrs {
    $attr: map-color-attrs($attribute);
    &#{$attr}#{$mix-prefix}#{$item}-hover {
      &:hover {
        #{$attribute}: transparentize($val, 0.2) !important;
      }
    }
    &#{$attr}#{$mix-prefix}#{$item}\:hover {
      &:hover {
        #{$attribute}: $val !important;
      }
    }
    &#{$attr}#{$mix-prefix}#{$item}\:focus {
      &:focus {
        #{$attribute}: $val !important;
      }
    }
    &#{$attr}#{$mix-prefix}#{$item}#{$mix-prefix}tp {
      #{$attribute}: darken($val, 3%) !important;
    }
  }
}
