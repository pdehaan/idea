@mixin map-component($key, $map: $mix-tokens, $prefix: "-") {
  $maps: get($key, $map);

  @each $item, $value in $maps {
    @if $item== "hover" {
      @if type-of($value) == "map" {
        &:hover {
          @each $c-key, $c-value in $value {
            #{$c-key}: $c-value;
          }
        }
      }
    } @else if type-of($value) == "map" {
      // @error "#{$key}.#{$item}";

      &#{$prefix}#{$item} {
        @if $item != "hover" {
          @include map("#{$key}.#{$item}");
        }
      }
    } @else {
      #{$item}: $value;

      @if type-of($value) == "color" {
        &#{$prefix}hover\:#{$item} {
          &:hover {
            #{$item}: transparentize($value, 0.2) !important;
          }
        }
      }
    }
  }
}

@mixin mix-component(
  $components: $mix-components,
  $map: $mix-tokens,
  $prefix: $mix-prefix
) {
  $maps: map-get($map, $components);

  @if type-of($maps) == "map" {
    @each $key, $val in $maps {
      // @error "#{s}.#{$key}";
      &#{$prefix}#{$key} {
        @include map("#{s}.#{$key}", $map);
      }
    }
  }
}

@mixin mix-custom($keys...) {
  @if (length($keys) >=1) {
    @each $key in $keys {
      $comp: get($key);

      // output the key and value
      @each $modifier, $value in $comp {
        // make sure the comp is not a map
        @if (type-of($value) != "map") {
          #{$modifier}: $value;
        } @else {
          @error "Error modifier value is not a type #{$value} is not a map";
        }
      }
    }
  }
}

// output map values as class modifiers
@mixin mix-modifier($key, $map: $mix-tokens) {
  $token: get($key, $map);

  @if length($token) >=0 {
    @each $item, $value in $token {
      @if type-of($value) == "map" {
        @if $item== "hover" {
          &:hover {
            @include mix-modifier("#{$key}.#{$item}");
          }
        } @else {
          &.#{$item} {
            @include mix-modifier("#{$key}.#{$item}");
          }
        }
      } @else {
        @if $item== "hover" {
          &:hover {
            #{$item}: $value;
          }
        } @else {
          #{$item}: $value;
        }
      }
    }
  }
}

@mixin mix-styles($keys...) {
  @if length($keys) >=1 {
    @each $item in $keys {
      @include mix-modifier($item);
    }
  }
}

@mixin build-components($component: $mix-components) {
  $components: get($component, $mix-tokens);
  // check if length greater that 0 the proceed else throw error
  @if length($components) >=0 {
    // check if comps loop through components
    @each $comp, $keys in $components {
      $modifier: if(
        $mix-extend-class == true,
        &#{$mix-prefix}#{$comp},
        ".#{$comp}"
      );
      @if type-of($keys) == "map" {
        .#{$comp} {
          @each $key, $value in $keys {
            @if type-of($value) == "map" {
              &#{$mix-prefix}#{$key} {
                // @debug "key #{$key}";
                @each $key_id, $key_val in $value {
                  #{$key_id}: $key_val;
                }
              }
            } @else {
              #{$key}: $value;
            }
          }
        }
      } @else {
        @debug "Error sass map required";
      }
    }
  } @else {
    @debug "Sorry your map(s) is empty";
  }
}
