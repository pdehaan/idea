@mixin class-generator(
  $key,
  $attribute,
  $map: $mix-tokens,
  $prefix: $mix-prefix
) {
  // get a predefined map

  $map: get($key, $map);
  @if type-of($map) != "map" {
    @error 'Incorrect map type `#{$map}`, map is required';
  } @else {
    // loop through maps
    //TODO check if the item is a map--map colors or run class generator value
    @each $item, $value in $map {
      // generate utility classes from keys
      // e.g. a color map containing colors .color-key { color: value }
      // prefix class if necessary
      $attr: map-color-attrs($attribute);
      &#{$attr}#{$prefix}#{$item} {
        @if type-of($item) == "map" {
          //@debug "value #{$item} item: #{$value}";
          @debug "key #{$key} .item #{$item} .value #{$value}";
          @include class-generator(
            "#{$key}.#{$value}",
            $attribute,
            $map,
            $prefix
          );
        } @else {
          @if type-of($value) != "map" {
            #{$attribute}: $value;
          } @else {
            @each $_key, $_value in $value {
              &#{$prefix}#{$_key} {
                #{$attribute}: $_value;
              }
            }
          }
        }
      }

      @if type-of($value) == "color" {
        // $attr: map-color-attrs($attribute);
        &#{$attr}#{$prefix}#{$item}\:hover {
          &:hover {
            #{$attribute}: $value !important;
          }
        }
        &#{$attr}#{$prefix}#{$item}\:focus {
          &:focus {
            #{$attribute}: $value !important;
          }
        }
        &#{$attr}#{$prefix}#{$item}#{$prefix}tp {
          #{$attribute}: transparentize($value, 0.2) !important;
        }
      }
    }
  }
}

// generate utility classes from your map key
@mixin mix-generator($key, $map: $mix-tokens, $attrs...) {
  @if length($attrs) >= 1 {
    @each $attr in $attrs {
      @include class-generator($key, $attr, $map);
    }
  }
}

@function map-color-attrs($attr) {
  @if $attr == "background-color" {
    @return "-bg";
  } @else if $attr == "border-color" {
    @return "-border";
  } @else {
    @return null;
  }
}

@mixin g-colors($map: $tokens) {
  /** MIX COLORS **/
  @include mix-generator(
    $mix-colors,
    $map,
    "color",
    "background-color",
    "border-color"
  );
}

@mixin g-fonts($map: $mix-tokens) {
  @include mix-generator($mix-fonts, $map, "fonts");
}

@mixin g-spacing($map: $mix-tokens) {
  @include mix-generator($mix-spacing, $map, "spacing");
}

@mixin g-sizing($map: $mix-tokens) {
  @include mix-generator($mix-sizing, $map, "spacing");
}
